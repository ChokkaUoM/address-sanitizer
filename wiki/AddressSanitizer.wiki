#summary AddressSanitizer: a fast memory error detector

=Introduction=

Many tools for finding memory bugs exist. <BR>
[http://www.valgrind.org Valgrind], [http://code.google.com/p/drmemory/ DrMemory],
[http://gcc.gnu.org/wiki/Mudflap_Pointer_Debugging Mudflap], 
[http://en.wikipedia.org/wiki/Electric_Fence  Electric Fence], Purify, Intel Inspector are among them. 
All these tools share the same problem -- they are slow. 

We propose a new tool called AddressSanitizer (*asan*) which finds 
*out-of-bound* and *use-after-free* bugs (a subset of bugs detectable by Valgrind).
The key advantage of this tool is that it is very fast (< 2x slowdown in most cases).
The tool consists of a compiler instrumentation module (currently, uses LLVM plugin)
and a run-time library which replaces the `malloc` function. 

The tool is in early stage of development but it already can run the Chromium browser (on Linux) and find bugs in it.

See also: 
  * AddressSanitizerAlgorithm

= Example =
The following is an example of use-after-free error message:
{{{
==818== ERROR: AddressSanitizer crashed on address 0x00000800029155e0 at pc 0x00408350
WRITE of size 1 at 0x00000800029155e0; shadow: 0x000004000148ab30; mem: 0x000000000148aaf0 thread: 0x8917a720
    #0 0x00408350  << void asan_write<unsigned char>(unsigned char*)  asan_test.cc:21
    #1 0x7fc588b4992a
    #2 0x7fc588b49a28
    #3 0x7fc588b49adb
    #4 0x7fc588b4dcfd
    #5 0x00407bce  << main  asan_test.cc:288
 0x000000000148aaf0 is the address located 0 bytes inside of region:
[0x000000000148aaf0,0x000000000148aafa) -- allocated memory of 0xa (10) bytes
[0x000000000148aaa0,0x000000000148aaf0) -- left red zone
[0x000000000148aafa,0x000000000148ab4a) -- right red zone
freed by thread 0x8917a720 here:
    #0 0x00411e6b  << free  asan_rtl.cc:1025
    #1 0x00407cc9  << free_ccc(void*)  asan_test.cc:46
    #2 0x00407ce9  << free_bbb(void*)  asan_test.cc:48
previously allocated by thread 0x8917a720 here:
    #0 0x004107c7  << malloc  asan_rtl.cc:1018
    #1 0x00407be6  << malloc_fff(unsigned long)  asan_test.cc:33
    #2 0x00407c06  << malloc_eee(unsigned long)  asan_test.cc:35
}}}

