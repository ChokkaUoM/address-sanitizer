#summary AddressSanitizer: a fast memory error detector

<wiki:toc max_depth="1" />


=Introduction=

Many tools for finding memory bugs exist. <BR>
[http://www.valgrind.org Valgrind], [http://code.google.com/p/drmemory/ DrMemory],
[http://gcc.gnu.org/wiki/Mudflap_Pointer_Debugging Mudflap], 
[http://en.wikipedia.org/wiki/Electric_Fence  Electric Fence], Purify, Intel Inspector are among them. 
All these tools share the same problem -- they are slow. 

We propose a new tool called AddressSanitizer (*asan*) which finds 
*out-of-bound* and *use-after-free* bugs (a subset of bugs detectable by Valgrind).
The key advantage of this tool is that it is very fast (< 2x slowdown in most cases).
The tool consists of a compiler instrumentation module (currently, an LLVM pass)
and a run-time library which replaces the `malloc` function. 

The tool is in early stage of development but it already can run the Chromium browser (on Linux) and find bugs in it.

See also:
  * AddressSanitizerAlgorithm -- if you are curious how it works.
  * ToDo -- if you want to help.

=Building AddressSanitizer=
The following will build the modified `clang` binary and run tests.
Getting and building LLVM/Clang will take some time.
{{{
svn checkout http://address-sanitizer.googlecode.com/svn/trunk/ address-sanitizer
cd address-sanitizer
./llvm/get_clang.sh
./llvm/patch_clang.sh
./llvm/build_clang.sh
cd asan
make -j && ./asan_test32 && ./asan_test64 && ./asan_test64full
}}}

So far, AddressSanitizer has been tested only on Linux Ubuntu 10.04, 64-bit
(it can run both 64- and 32-bit programs).

= Using AddressSanitizer =
In order to use AddressSanitizer you will need to build your program
with the modified `clang` binary and link against the run-time library (as well as few other libraries).
{{{
% cat use-after-free.c
#include <stdlib.h>
int main() {
  char *x = malloc(10 * sizeof(char*));
  free(x);
  return x[5];
}
% ../clang_build/Debug+Asserts/bin/clang -O2  use-after-free.c asan_rtl64.a -lpthread -lstdc++
% ./a.out
==1067== ERROR: AddressSanitizer crashed on address 0x0000200000607818 at pc 0x4013e7
READ of size 1 at 0x0000200000607818; shadow: 0x0000100000303c0c; mem: 0x000000000181e065 thread: 0x2d7d8720
PC: 0x00000000004013e7: c6 04 00 01 0f be 03 48
    #0 0x4013e7
    #1 0x7f652cb33c4d (/lib/libc-2.11.1.so+0x1ec4d)
    #2 0x4012d9
 0x000000000181e065 is the address located 5 bytes inside of region:
[0x000000000181e060,0x000000000181e0b0) -- allocated memory of 0x50 (80) bytes
freed by thread 0x2d7d8720 here:
    #0 0x404cc9
    #1 0x4013bb
    #2 0x7f652cb33c4d (/lib/libc-2.11.1.so+0x1ec4d)
    #3 0x4012d9
previously allocated by thread 0x2d7d8720 here:
    #0 0x4062e5
    #1 0x4013b0
    #2 0x7f652cb33c4d (/lib/libc-2.11.1.so+0x1ec4d)
    #3 0x4012d9
}}}